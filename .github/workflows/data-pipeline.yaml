name: Weekly Data Update

on:
  schedule:
    - cron: "30 6-21/3 * * 4" # Runs every Thursday, starting from 6:30 AM UTC until 9:30 PM UTC, every 3 hours
    - cron: "30 21 * * 5,6" # Separately runs another two times, on every Friday and Saturday at 9:30 PM UTC
  workflow_dispatch:

concurrency:
  group: data-pipeline
  cancel-in-progress: false

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
          fetch-depth: 0
          ref: main # Explicitly checkout main

      - name: Update Submodule
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull origin main
          git submodule update --remote
          git submodule update
          git submodule foreach git pull origin main

      - name: Create subdirectory for all target locations for all data
        run: |
          ./scripts/setup_directories.sh

      - name: Check and Copy New Files
        id: check-copy
        run: |
          source ./scripts/data_retrieval.sh

      # Set up python and run transform_data.py ONLY WHEN new prediction data is copied
      - name: Setup Python
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_ARCHIVE_DATA_COPIED == 'true' || env.NEW_EVALUATIONS_DATA_COPIED == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python Dependencies
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_ARCHIVE_DATA_COPIED == 'true' || env.NEW_EVALUATIONS_DATA_COPIED == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install numpy pandas glob2

      - name: Execute Data Transformation
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_ARCHIVE_DATA_COPIED == 'true' || env.NEW_EVALUATIONS_DATA_COPIED == 'true' }}
        run: python scripts/data_processing.py
      # End of python setup and execution

      - name: Update Main Branch
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_ARCHIVE_DATA_COPIED == 'true' || env.NEW_EVALUATIONS_DATA_COPIED == 'true' }}
        run: |
          # Generate timestamp
          # The timestamp is created once then put into env for easier access
          TIMESTAMP=$(date +'%Y-%m-%d-%H-%M-%S')
          echo "TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV

          echo "Updating main branch with data changes..."

          # Stage data changes
          git add public/data/*.json data_processing_dir/raw/

          # Stage submodule changes
          git add FluSight-forecast-hub || true
          git add epistorm-evaluations || true

          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Data update ${TIMESTAMP}
            
            - Updated data files
            - Updated submodules reference"
            
            # Push changes to main
            if ! git push origin main; then
              echo "Failed to push to main"
              exit 1
            fi
            
            # Create and push main tag
            MAIN_TAG="data-update/main/${TIMESTAMP}"
            git tag -a "${MAIN_TAG}" -m "Data update at ${TIMESTAMP}"
            git push origin "${MAIN_TAG}"
            
            echo "DATA_UPDATED=true" >> $GITHUB_ENV
          else
            echo "No changes detected to commit"
            exit 0
          fi

      # Create a release branch from the updated main
      - name: Create Release Branch
        if: ${{ env.DATA_UPDATED == 'true' }}
        run: |
          # Release branch from updated main
          RELEASE_BRANCH="release/data-update/${TIMESTAMP}"
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV

          echo "Creating release branch ${RELEASE_BRANCH} from main..."
          git checkout -b "${RELEASE_BRANCH}" main

          # Push the release branch
          if ! git push -u origin "${RELEASE_BRANCH}"; then
            echo "Failed to push release branch"
            exit 1
          fi

      # Update production branch via a merge PR from the release branch
      - name: Update Production Branch
        if: ${{ env.DATA_UPDATED == 'true' }}
        run: |
          echo "Updating production branch..."
          git fetch origin production:production
          git checkout production

          # Merge the release branch into production with --no-ff for clean history
          # The [skip ci] string is for safety, making sure no side effects are run
          if ! git merge --no-ff "${RELEASE_BRANCH}" -m "Release data update ${TIMESTAMP} [skip ci]"; then
            echo "Merge conflict detected. Attempting resolution strategy..."
            
            # In case of conflicts, favor the incoming changes from the release branch
            git checkout --theirs public/data/
            git add public/data/
            git commit -m "Resolve merge conflicts for data update ${TIMESTAMP} [skip ci]"
          fi

          # Create production tag
          PROD_TAG="data-update/production/${TIMESTAMP}"
          git tag -a "${PROD_TAG}" -m "Production data update at ${TIMESTAMP}"

          # Push production changes and tag
          if ! git push origin production && git push origin "${PROD_TAG}"; then
            echo "Failed to push to production"
            exit 1
          fi

          echo "PRODUCTION_UPDATED=true" >> $GITHUB_ENV

      # Update demo branch via a merge PR from the release branch
      - name: Update Demo Branch
        if: ${{ env.DATA_UPDATED == 'true' }}
        run: |
          echo "Updating demo branch..."
          git fetch origin demo:demo
          git checkout demo

          if ! git merge --no-ff "${RELEASE_BRANCH}" -m "Release data update ${TIMESTAMP} [skip ci]"; then
            echo "Merge conflict detected. Attempting resolution strategy..."
            
            # In case of conflicts, favor the incoming changes from the release branch
            git checkout --theirs public/data/
            git add public/data/
            git commit -m "Resolve merge conflicts for data update ${TIMESTAMP} [skip ci]"
          fi

          # Create demo tag
          DEMO_TAG="data-update/demo/${TIMESTAMP}"
          git tag -a "${DEMO_TAG}" -m "Demo data update at ${TIMESTAMP}"

          # Push demo changes and tag
          if ! git push origin demo && git push origin "${DEMO_TAG}"; then
            echo "Failed to push to demo"
            exit 1
          fi

          echo "DEMO_UPDATED=true" >> $GITHUB_ENV

      # Trigger respective deployments
      - name: Trigger Production Deployment
        if: ${{ env.PRODUCTION_UPDATED == 'true' }}
        run: |
          gh workflow run "Deploy to GCP App Engine Default Service"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Demo Deployment
        if: ${{ env.DEMO_UPDATED == 'true' }}
        run: |
          gh workflow run "Deploy to GCP App Engine Demo Service"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
