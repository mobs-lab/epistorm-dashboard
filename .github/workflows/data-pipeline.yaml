name: Weekly Data Update

on:
  schedule:
    - cron: '30 6-21/3 * * 4'  # Runs every Thursday, starting from 6:30 AM UTC until 9:30 PM UTC, every 3 hours
    - cron: '30 21 * * 5,6'   # Separately runs another two times, on every Friday and Saturday at 9:30 PM UTC
  workflow_dispatch:

concurrency:
  group: data-pipeline
  cancel-in-progress: false

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
          ref: main  # Explicitly checkout main

      - name: Update Submodule
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git pull origin main
          git submodule update --remote
          git submodule update
          git submodule foreach git pull origin main

      - name: Create subdirectory for all target locations for all data
        run: |
          ./scripts/setup_directories.sh

      - name: Check and Copy New Files
        id: check-copy
        run: |
          source ./scripts/data_retrieval.sh

      # Set up python and run transform_data.py ONLY WHEN new prediction data is copied
      - name: Setup Python
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true'}}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python Dependencies
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true'}}
        run: |
          python -m pip install --upgrade pip
          pip install numpy pandas glob2

      - name: Execute Data Transformation
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true' }}
        run: python scripts/transform_data.py
      # End of python setup and execution

      # Clean up after surveillance data
      - name: Execute Surveillance Data Cleaning
        if: ${{ env.NEW_SURVEILLANCE_DATA_COPIED == 'true'|| env.NEW_SURVEILLANCE_ARCHIVE_DATA_COPIED == 'true'}}
        run: python scripts/clean_surveillance_data.py

      # Commit back to main branch, and releasing into production/demo branch are done together to avoid timestamp issue
      - name: Commit Changes to Main and Update Branches
        if: ${{ env.NEW_PREDICTION_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_DATA_COPIED == 'true' || env.NEW_SURVEILLANCE_ARCHIVE_DATA_COPIED == 'true' || env.NEW_EVALUATIONS_DATA_COPIED == 'true' }}
        run: |
          # Generate timestamp
          TIMESTAMP=$(date +'%Y-%m-%d-%H-%M-%S')

          echo "======================="
          echo "Updating main branch..."
          echo "-----------------------"

          # Stage data changes
          git add public/data/unprocessed/* public/data/ground-truth/* public/data/processed/* || true
          
          # Stage submodule changes
          git add FluSight-forecast-hub || true
          git add epistorm-evaluations || true
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Data update ${TIMESTAMP}
            
            - Updated data files
            - Updated submodules reference"
            
            # Push changes to main
            if ! git push origin main; then
              echo "Failed to push to main"
              exit 1
            fi
            
            # Create and push main tag
            MAIN_TAG="data-update/main/${TIMESTAMP}"
            git tag -a "${MAIN_TAG}" -m "Data update at ${TIMESTAMP}"
            git push origin "${MAIN_TAG}"
          fi
          
          # Update production branch
          echo "Updating production branch..."
          git fetch origin production:production
          git checkout production
          
          # Get data directory from main
          git checkout main -- public/data/
          
          # Stage all the date updates
          git add public/data/
          
          # Commit and push udpates if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Data update ${TIMESTAMP} [skip ci]
            
            - Synced data files from main"
            
            # Create production tag
            PROD_TAG="data-update/production/${TIMESTAMP}"
            git tag -a "${PROD_TAG}" -m "Production data update at ${TIMESTAMP}"
            
            # Push production changes and tag
            if ! git push origin production && git push origin "${PROD_TAG}"; then
              echo "Failed to push to production"
              exit 1
            fi
            
            echo "PRODUCTION_UPDATED=true" >> $GITHUB_ENV
          fi
          
          # Update demo branch
          echo "Updating demo branch..."
          git fetch origin demo:demo
          git checkout demo
          
          # Copy data directory from main
          git checkout main -- public/data/
          
          # Stage demo changes
          git add public/data/
          
          # Commit and push demo if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Data update ${TIMESTAMP} [skip ci]
            
            - Synced data files from main"
            
            # Create demo tag
            DEMO_TAG="data-update/demo/${TIMESTAMP}"
            git tag -a "${DEMO_TAG}" -m "Demo data update at ${TIMESTAMP}"
            
            # Push demo changes and tag
            if ! git push origin demo && git push origin "${DEMO_TAG}"; then
              echo "Failed to push to demo"
              exit 1
            fi
            
            echo "DEMO_UPDATED=true" >> $GITHUB_ENV
          fi

      # 4. Trigger respective deployments
      - name: Trigger Production Deployment
        if: ${{ env.PRODUCTION_UPDATED == 'true' }}
        run: |
          gh workflow run "Deploy to GCP App Engine Default Service"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger Demo Deployment
        if: ${{ env.DEMO_UPDATED == 'true' }}
        run: |
          gh workflow run "Deploy to GCP App Engine Demo Service"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}