'use client'
import {useEffect, useRef} from "react"
import * as topojson from "topojson-client";
import * as d3 from "d3"
import {zoom, zoomIdentity} from "d3-zoom";
import {useAppDispatch, useAppSelector} from '../../store/hooks';
import {updateSelectedState} from '../../store/filterSlice';

// Path to the shapeFile containing US state data, in GEOJSON format
const usStateData = "/states-albers-10m.json"


const StateMap: React.FC = () => {
    const svgRef = useRef(null);
    const width = 640;
    const height = 480;

    const dispatch = useAppDispatch();
    const {selectedStateName, USStateNum} = useAppSelector((state) => state.filter);
    const locationData = useAppSelector((state) => state.location.data);

    const renderMap = () => {
        if (!svgRef.current) return;

        const svg = d3.select(svgRef.current)
            .attr("viewBox", [0, 0, width, height])
            .attr("width", width)
            .attr("height", height)
            .attr("style", "max-width: 100%; height: auto;")
            .on("click", reset);

        const path = d3.geoPath();

        let g = svg.select("g");
        if (g.empty()) {
            g = svg.append("g");
        }

        const zoomBehavior = zoom()
            .scaleExtent([1, 8])
            .translateExtent([[0, 0], [width, height]])
            .on("zoom", zoomed);

        svg.call(zoomBehavior);

        const fetchData = async () => {
            try {
                const us: any = await d3.json(usStateData);

                const states = g.selectAll("path")
                    .data(topojson.feature(us, us.objects.states).features)
                    .join("path")
                    .attr("fill", "#444")
                    .attr("cursor", "pointer")
                    .on("click", clicked)
                    .attr("d", path);

                svg.selectAll("path").each(function (d: any) {
                    d.path = this;
                });

                states.append("title")
                    .text((d: any) => d.properties.name);

                g.append("path")
                    .attr("fill", "none")
                    .attr("stroke", "white")
                    .attr("stroke-linejoin", "round")
                    .attr("d", path(topojson.mesh(us, us.objects.states, (a: any, b: any) => a !== b)));

            } catch (error) {
                console.error("Error loading US state data: ", error);
            }
        };

        function reset() {
            g.selectAll("path").transition().style("fill", null);
            svg.transition().duration(750).call(zoomBehavior.transform, zoomIdentity, zoomIdentity.translate(width / 2, height / 2).scale(1));
        }

        function clicked(event: any, d: any) {
            const [[x0, y0], [x1, y1]] = path.bounds(d);
            event.stopPropagation();
            g.selectAll("path").transition().style("fill", null);
            d3.select(event.currentTarget).transition().style("fill", "red");
            svg.transition().duration(750).call(zoomBehavior.transform, zoomIdentity
                .translate(width / 2, height / 2)
                .scale(Math.min(8, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))
                .translate(-(x0 + x1) / 2, -(y0 + y1) / 2), d3.pointer(event, svg.node()));
            dispatch(updateSelectedState({stateName: d.properties.name, stateNum: d.id}));
        }

        function zoomed(event: any) {
            const {transform} = event;
            g.attr("transform", transform);
            g.attr("stroke-width", 1 / transform.k);
        }

        const resetButton = svg.append("g")
            .attr("transform", `translate(${width - 50}, 20)`)
            .attr("cursor", "pointer")
            .on("click", reset);

        resetButton.append("rect")
            .attr("width", 40)
            .attr("height", 20)
            .attr("fill", "#f0f0f0")
            .attr("stroke", "#999");

        resetButton.append("text")
            .attr("x", 20)
            .attr("y", 15)
            .attr("text-anchor", "middle")
            .text("Reset");

        fetchData();
    };

    useEffect(() => {
        if (locationData.length > 0) {
            renderMap();
        }
    }, [locationData]);

    useEffect(() => {
        if (svgRef.current) {
            const svg = d3.select(svgRef.current);
            const paths = svg.selectAll("path");
            svg.selectAll("path").transition().style("fill", null);

            const selectedState = paths.filter((d: any) => {
                return d && d.properties && d.properties.name === selectedStateName;
            });
            selectedState.transition().style("fill", "red");
        }
    }, [selectedStateName]);

    return <svg ref={svgRef}/>;
};

export default StateMap;